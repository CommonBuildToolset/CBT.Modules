<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(CBTLocalBuildExtensionsPath)\Before.$(MSBuildThisFile)" Condition=" '$(CBTLocalBuildExtensionsPath)' != '' And Exists('$(CBTLocalBuildExtensionsPath)\Before.$(MSBuildThisFile)') " />

  <Import Project="$(CBTModuleExtensionsPath)\Before.$(MSBuildThisFile)" Condition=" '$(CBTModuleExtensionsPath)' != '' And Exists('$(CBTModuleExtensionsPath)\Before.$(MSBuildThisFile)') " />

  <Import Project="$(CBTLocalBuildExtensionsPath)\AssemblyInfo.props" Condition=" '$(CBTLocalBuildExtensionsPath)' != '' And Exists('$(CBTLocalBuildExtensionsPath)\AssemblyInfo.props') " />

  <PropertyGroup>
    <MSBuildTasksPath Condition=" '$(MSBuildTasksPath)' == '' ">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MSBuildTasksPath>
    <MSBuildTasksPath Condition=" !Exists('$(MSBuildTasksPath)') ">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MSBuildTasksPath>

    <AssemblyInfoOutputPath Condition=" '$(AssemblyInfoOutputPath)' == '' ">$(IntermediateOutputPath)</AssemblyInfoOutputPath>

    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>

    <AssemblyInfoAllProjects>$(AssemblyInfoAllProjects);$(MSBuildThisFileFullPath);$(MSBuildProjectFullPath)</AssemblyInfoAllProjects>
    <AssemblyInfoAllProjects Condition=" '$(CBTLocalBuildExtensionsPath)' != '' And Exists('$(CBTLocalBuildExtensionsPath)\AssemblyInfo.props') ">$(AssemblyInfoAllProjects);$(CBTLocalBuildExtensionsPath)\AssemblyInfo.props</AssemblyInfoAllProjects>

  </PropertyGroup>

  <PropertyGroup Condition=" '$(Language)' == 'C#' Or '$(Language)' == 'VB' ">
    <CoreCompileDependsOn>CBTGenerateAssemblyInfo;$(CoreCompileDependsOn)</CoreCompileDependsOn>

    <CBTGenerateAssemblyInfoDependsOn>
      DetermineAssemblyVersionInfo;
      DetermineAssemblyFrameworkInfo;
      _AssignAssemblyInfoOutputPaths;
      _CBTGenerateAssemblyInfoFile;
      $(CBTGenerateAssemblyInfoDependsOn)
    </CBTGenerateAssemblyInfoDependsOn>

    <!-- Default path to the AssemblyInfo template.  Override this property to use your own template. -->
    <AssemblyInfoTemplatePath Condition=" '$(AssemblyInfoTemplatePath)' == '' ">$(MSBuildThisFileDirectory)Templates\AssemblyInfo$(DefaultLanguageSourceExtension)</AssemblyInfoTemplatePath>

    <!-- Default values to use for managed projects. -->
    <AssemblyInfoProduct Condition=" '$(AssemblyInfoProduct)' == '' ">$(Product)</AssemblyInfoProduct>
    <AssemblyInfoCopyright Condition=" '$(AssemblyInfoCopyright)' == '' ">$(Copyright)</AssemblyInfoCopyright>
    <AssemblyInfoCompany Condition=" '$(AssemblyInfoCompany)' == '' ">$(Company)</AssemblyInfoCompany>
    <AssemblyInfoConfiguration Condition=" '$(AssemblyInfoConfiguration)' == '' ">$(Configuration)</AssemblyInfoConfiguration>
    <AssemblyInfoCLSCompliant Condition=" '$(AssemblyInfoCLSCompliant)' == '' ">true</AssemblyInfoCLSCompliant>
    <AssemblyInfoComVisible Condition=" '$(AssemblyInfoComVisible)' == '' ">false</AssemblyInfoComVisible>
  </PropertyGroup>

  <ItemGroup Condition=" '$(Language)' == 'C#' Or '$(Language)' == 'VB' ">

    <AssemblyInfoTemplateFile Include="$(AssemblyInfoTemplatePath)" Condition="Exists('$(AssemblyInfoTemplatePath)')">
      <AssemblyInfoCLSCompliant>$(AssemblyInfoCLSCompliant)</AssemblyInfoCLSCompliant>
      <AssemblyInfoCompany>$(AssemblyInfoCompany)</AssemblyInfoCompany>
      <AssemblyInfoComVisible>$(AssemblyInfoComVisible)</AssemblyInfoComVisible>
      <AssemblyInfoConfiguration>$(AssemblyInfoConfiguration)</AssemblyInfoConfiguration>
      <AssemblyInfoCopyright>$(AssemblyInfoCopyright)</AssemblyInfoCopyright>
      <AssemblyInfoCulture>$(AssemblyInfoCulture)</AssemblyInfoCulture>
      <AssemblyInfoProduct>$(AssemblyInfoProduct)</AssemblyInfoProduct>
      <AssemblyInfoTargetFrameworkMoniker>$(TargetFrameworkMoniker)</AssemblyInfoTargetFrameworkMoniker>
      <AssemblyInfoTargetFrameworkMonikerDisplayName>$(TargetFrameworkMonikerDisplayName)</AssemblyInfoTargetFrameworkMonikerDisplayName>
      <AssemblyInfoTrademark>$(AssemblyInfoTrademark)</AssemblyInfoTrademark>

      <AutoGen>true</AutoGen>
    </AssemblyInfoTemplateFile>

  </ItemGroup>

  <Target Name="DetermineAssemblyVersionInfo"
    DependsOnTargets="$(DetermineAssemblyVersionInfoDependsOn)">

    <ItemGroup>
      <AssemblyInfoTemplateFile>
        <AssemblyInfoFileVersion>$(AssemblyInfoFileVersion)</AssemblyInfoFileVersion>
        <AssemblyInfoFileDescription>$(AssemblyInfoFileDescription)</AssemblyInfoFileDescription>
        <AssemblyInfoInternalName>$(AssemblyInfoInternalName)</AssemblyInfoInternalName>
        <AssemblyInfoOriginalFileName>$(AssemblyInfoOriginalFileName)</AssemblyInfoOriginalFileName>
        <AssemblyInfoInformationalVersion>$(AssemblyInfoInformationalVersion)</AssemblyInfoInformationalVersion>
        <AssemblyInfoAssemblyVersion>$(AssemblyInfoAssemblyVersion)</AssemblyInfoAssemblyVersion>

        <!-- Override the output file to include the version so that the project will be rebuilt if it changes -->
        <OutputFileHash>%(AssemblyInfoTemplateFile.OutputFileHash);$(Version4PartVersion)</OutputFileHash>
      </AssemblyInfoTemplateFile>
    </ItemGroup>

  </Target>

  <Target Name="DetermineAssemblyFrameworkInfo" Condition=" '$(GenerateTargetFrameworkAttribute)' == 'false' ">
    <ItemGroup>
      <AssemblyInfoTemplateFile>
        <!-- Override the output file to include the framework version so that the project will be rebuilt if it changes -->
        <OutputFileHash>%(AssemblyInfoTemplateFile.OutputFileHash);$(TargetFrameworkMonikerDisplayName)</OutputFileHash>
      </AssemblyInfoTemplateFile>
    </ItemGroup>
  </Target>

  <Target Name="CBTGenerateAssemblyInfo"
    Condition=" '@(AssemblyInfoTemplateFile)' != '' "
    DependsOnTargets="$(CBTGenerateAssemblyInfoDependsOn)" />

  <Target Name="_AssignAssemblyInfoOutputPaths">

    <PropertyGroup>
      <AssemblyInfoAllProjects Condition=" '@(AssemblyInfoTemplateFile)' != '' ">$(AssemblyInfoAllProjects);@(AssemblyInfoTemplateFile)</AssemblyInfoAllProjects>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Language)' == 'C#' Or '$(Language)' == 'VB' ">
      <_AssemblyInfoTemplateOutputFileHash>%(AssemblyInfoTemplateFile.OutputFileHash)</_AssemblyInfoTemplateOutputFileHash>
    </PropertyGroup>

    <ItemGroup Condition=" '$(Language)' == 'C#' Or '$(Language)' == 'VB' ">
      <AssemblyInfoTemplateFile Condition=" '%(AssemblyInfoTemplateFile.OutputFile)' == '' ">
        <OutputFile>$(AssemblyInfoOutputPath)%(Filename)-$(_AssemblyInfoTemplateOutputFileHash.ToUpperInvariant().GetHashCode().ToString('X2')).g%(Extension)</OutputFile>
      </AssemblyInfoTemplateFile>
    </ItemGroup>

  </Target>

  <Target Name="_CBTGenerateAssemblyInfoFile"
    Condition=" '@(AssemblyInfoTemplateFile)' != '' "
    DependsOnTargets="_AssignAssemblyInfoOutputPaths"
    Inputs="$(AssemblyInfoAllProjects);%(AssemblyInfoTemplateFile.Identity)"
    Outputs="%(AssemblyInfoTemplateFile.OutputFile)">

    <Error Text="Could not find assembly information template file &quot;%(AssemblyInfoTemplateFile.Identity)&quot;." Condition=" !Exists('%(AssemblyInfoTemplateFile.Identity)') " />

    <MakeDir Condition="!Exists('$(AssemblyInfoOutputPath)')" Directories="$(AssemblyInfoOutputPath)" />

    <Message Text="Generating assembly information file &quot;%(AssemblyInfoTemplateFile.OutputFile)&quot; from template &quot;%(AssemblyInfoTemplateFile.Identity)&quot;." />

    <CBTGenerateAssemblyInfoFile InputFile="@(AssemblyInfoTemplateFile)" OutputFile="%(AssemblyInfoTemplateFile.OutputFile)">

      <Output TaskParameter="OutputFile" ItemName="Compile"/>
      <Output TaskParameter="OutputFile" ItemName="FileWrites"/>

    </CBTGenerateAssemblyInfoFile>

  </Target>

  <UsingTask TaskName="CBTGenerateAssemblyInfoFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildTasksPath)">
    <ParameterGroup>
      <InputFile ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <OutputFile ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="System.Threading" />
      <Code Type="Fragment" Language="cs"><![CDATA[
using (Mutex mutex = new Mutex(false, OutputFile.ItemSpec.ToLowerInvariant().GetHashCode().ToString("X")))
{
    bool owner = false;
    try
    {
        owner = mutex.WaitOne(TimeSpan.FromMinutes(1));

        if (!owner) throw new TimeoutException("Timed out waiting for exclusive access to AssemblyInfo output file.");

        File.WriteAllText(OutputFile.ItemSpec, Regex.Replace(File.ReadAllText(InputFile.ItemSpec), @"\$\((?<Key>[^\)]+)\)", match => match.Groups["Key"] != null && match.Groups["Key"].Success ? InputFile.GetMetadata(match.Groups["Key"].Value).Trim() : String.Empty, RegexOptions.Multiline));

        InputFile.CopyMetadataTo(OutputFile);
    }
    finally
    {
        if (owner) mutex.ReleaseMutex();
    }
}
      ]]></Code>
    </Task>
  </UsingTask>

  <Import Project="$(CBTLocalBuildExtensionsPath)\After.$(MSBuildThisFile)" Condition=" '$(CBTLocalBuildExtensionsPath)' != '' And Exists('$(CBTLocalBuildExtensionsPath)\After.$(MSBuildThisFile)') " />

  <Import Project="$(CBTModuleExtensionsPath)\After.$(MSBuildThisFile)" Condition=" '$(CBTModuleExtensionsPath)' != '' And Exists('$(CBTModuleExtensionsPath)\After.$(MSBuildThisFile)') " />

</Project>
