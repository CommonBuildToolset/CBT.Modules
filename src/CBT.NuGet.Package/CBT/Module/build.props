<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <CBTNuGetTasksAssemblyPath Condition=" '$(CBTNuGetTasksAssemblyPath)' == '' ">$(MSBuildThisFileDirectory)CBT.NuGet.dll</CBTNuGetTasksAssemblyPath>
    <CBTNuGetAllProjects>$(CBTNuGetAllProjects);$(MSBuildThisFileFullPath);$(MSBuildThisFileDirectory)CBT.NuGet.targets;$(MSBuildThisFileDirectory)After.Microsoft.Common.targets;$(CBTNuGetTasksAssemblyPath)</CBTNuGetAllProjects>
    <CBTEnablePackageRestore Condition=" '$(CBTEnablePackageRestore)' == '' ">true</CBTEnablePackageRestore>
    <CBTEnableGlobalPackageRestore Condition=" '$(CBTEnableGlobalPackageRestore)' == '' ">true</CBTEnableGlobalPackageRestore>
    <CBTNuGetPath Condition=" '$(CBTNuGetPath)' == '' And '$(CBTModuleRestoreCommand)' != '' And $([System.IO.Path]::GetFileName($(CBTModuleRestoreCommand))) == 'NuGet.exe' And Exists($(CBTModuleRestoreCommand)) ">$([System.IO.Path]::GetDirectoryName($(CBTModuleRestoreCommand)))</CBTNuGetPath>
    <CBTEnableImportBuildPackages Condition=" '$(CBTEnableImportBuildPackages)' == '' ">true</CBTEnableImportBuildPackages>
    <CBTNuGetIntermediateOutputPath Condition=" '$(IntermediateOutputPath)' != '' ">$(IntermediateOutputPath)</CBTNuGetIntermediateOutputPath>
    <CBTNuGetIntermediateOutputPath Condition=" '$(IntermediateOutputPath)' == '' ">$(CBTIntermediateOutputPath)\$(MSBuildProjectDirectory.ToLower().GetHashcode().ToString('X'))</CBTNuGetIntermediateOutputPath>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(CBTEnablePackageRestore)' == 'true' And '$(CBTNuGetRestoreFile)' == '' And Exists('$(MSBuildProjectDirectory)\project.json') ">
    <!-- For project.json, the file to pass to restore is the project itself -->
    <CBTNuGetRestoreFile>$(MSBuildProjectFullPath)</CBTNuGetRestoreFile>
    <NuGetProps Condition=" '$(NuGetProps)' == '' ">$(MSBuildThisFileDirectory)Microsoft.NuGet\Microsoft.NuGet.props</NuGetProps>
    <NuGetTargets Condition=" '$(NuGetTargets)' == '' ">$(MSBuildThisFileDirectory)Microsoft.NuGet\Microsoft.NuGet.targets</NuGetTargets>
  </PropertyGroup>
  
  <PropertyGroup Condition=" '$(CBTEnablePackageRestore)' == 'true' And '$(CBTNuGetRestoreFile)' == ''  And Exists('$(MSBuildProjectDirectory)\packages.config') ">
    <CBTNuGetRestoreFile>$(MSBuildProjectDirectory)\packages.config</CBTNuGetRestoreFile>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(CBTEnableGlobalPackageRestore)' == 'true' And '$(CBTNuGetGlobalPackagesRestoreFile)' == ''  And Exists('$(CBTLocalPath)\GlobalPackages\packages.config') ">
    <CBTNuGetGlobalPackagesRestoreFile>$(CBTLocalPath)\GlobalPackages\packages.config</CBTNuGetGlobalPackagesRestoreFile>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Disable package restoration if there is no packages.config/project.json -->
    <CBTEnablePackageRestore Condition=" '$(CBTNuGetRestoreFile)' == '' ">false</CBTEnablePackageRestore>
  </PropertyGroup>
  
  <PropertyGroup Condition=" '$(CBTEnablePackageRestore)' == 'true' OR '$(CBTEnableGlobalPackageRestore)' == 'true' ">
    <CBTNuGetAllProjects Condition=" '$(CBTEnablePackageRestore)' == 'true' ">$(CBTNuGetAllProjects);$(CBTNuGetRestoreFile)</CBTNuGetAllProjects>
    <CBTNuGetAllProjects Condition=" '$(CBTEnableGlobalPackageRestore)' == 'true' ">$(CBTNuGetAllProjects);$(CBTNuGetGlobalPackagesRestoreFile)</CBTNuGetAllProjects>
    <CBTNuGetRestorePackagesDirectory Condition=" '$(CBTNuGetRestorePackagesDirectory)' == '' ">$(NuGetPackagesPath)</CBTNuGetRestorePackagesDirectory>
    <CBTNuGetGeneratePackageProperties Condition=" '$(CBTNuGetGeneratePackageProperties)' == '' ">true</CBTNuGetGeneratePackageProperties>
    <CBTNuGetPackagesRestoredMarker Condition=" '$(CBTNuGetPackagesRestoredMarker)' == '' ">$(CBTNuGetIntermediateOutputPath)\$(MSBuildProjectFile).CBTNuGetPackagesRestored</CBTNuGetPackagesRestoredMarker>
    <CBTNuGetGlobalPackagesRestoredMarker Condition=" '$(CBTNuGetGlobalPackagesRestoredMarker)' == '' ">$(CBTNuGetIntermediateOutputPath)\GlobalPackages.CBTNuGetPackagesRestored</CBTNuGetGlobalPackagesRestoredMarker>
    <CBTNuGetRestoreRequireConsent Condition=" '$(CBTNuGetRestoreRequireConsent)' == '' ">false</CBTNuGetRestoreRequireConsent>
    <CBTNuGetDisableParallelProcessing Condition=" '$(CBTNuGetDisableParallelProcessing)' == '' ">false</CBTNuGetDisableParallelProcessing>
    <CBTNuGetNoCache Condition=" '$(CBTNuGetNoCache)' == '' ">false</CBTNuGetNoCache>
    <CBTNuGetNonInteractive Condition=" '$(CBTNuGetNonInteractive)' == '' ">true</CBTNuGetNonInteractive>
    <CBTNuGetTimeout Condition=" '$(CBTNuGetTimeout)' == '' ">0</CBTNuGetTimeout>
    <CBTNuGetPackagePropertyNamePrefix Condition=" '$(CBTNuGetPackagePropertyNamePrefix)' == '' ">NuGetPath_</CBTNuGetPackagePropertyNamePrefix>
    <CBTNuGetPackagePropertyValuePrefix Condition=" '$(CBTNuGetPackagePropertyValuePrefix)' == '' ">%24(NuGetPackagesPath)\</CBTNuGetPackagePropertyValuePrefix>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(CBTEnableGlobalPackageRestore)' == 'true' And '$(BuildingInsideVisualStudio)' != 'true' And '$(NuGet_ProjectReferenceToResolve)' == '' And '$(IsRestoreOnly)' != 'true' ">
    <!-- Restore packages if not running under Visual Studio and not running as part of NuGet's restore -->
    <CBTNuGetGlobalPackagesRestored>$(CBTNuGetTasksAssemblyPath.GetType().Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue(null).CreateInstanceFromAndUnwrap($(CBTNuGetTasksAssemblyPath), 'CBT.NuGet.Tasks.NuGetRestore').Execute('$(CBTNuGetGlobalPackagesRestoreFile)','$(NuGetMsBuildVersion)','$(CBTNuGetRestorePackagesDirectory)',$(CBTNuGetRestoreRequireConsent),'$(NuGetRestoreSolutionDirectory)',$(CBTNuGetDisableParallelProcessing),$(NuGetFallbackSource.Split(';')), $(CBTNuGetNoCache), '$(NuGetPackageSaveMode)',$(NuGetSource.Split(';')),'$(NuGetConfigFile)',$(CBTNuGetNonInteractive),'$(NuGetVerbosity)',$(CBTNuGetTimeout),'$(CBTNuGetPath)',$([MSBuild]::ValueOrDefault('$(CBTEnableNuGetPackageRestoreOptimization)', 'true')),$(CBTNuGetGlobalPackagesRestoredMarker),$(CBTNuGetAllProjects.Split(';'))))</CBTNuGetGlobalPackagesRestored>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(CBTEnablePackageRestore)' == 'true' And '$(BuildingInsideVisualStudio)' != 'true' And '$(NuGet_ProjectReferenceToResolve)' == '' And '$(IsRestoreOnly)' != 'true' ">
    <!-- Restore packages if not running under Visual Studio and not running as part of NuGet's restore -->
    <CBTNuGetPackagesRestored>$(CBTNuGetTasksAssemblyPath.GetType().Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue(null).CreateInstanceFromAndUnwrap($(CBTNuGetTasksAssemblyPath), 'CBT.NuGet.Tasks.NuGetRestore').Execute($(CBTNuGetRestoreFile), '$(NuGetMsBuildVersion)', $(CBTNuGetRestorePackagesDirectory), $(CBTNuGetRestoreRequireConsent), $(NuGetRestoreSolutionDirectory), $(CBTNuGetDisableParallelProcessing), $(NuGetFallbackSource.Split(';')), $(CBTNuGetNoCache), $(NuGetPackageSaveMode), $(NuGetSource.Split(';')), $(NuGetConfigFile), $(CBTNuGetNonInteractive), $(NuGetVerbosity), $(CBTNuGetTimeout), $(CBTNuGetPath), $([MSBuild]::ValueOrDefault('$(CBTEnableNuGetPackageRestoreOptimization)', 'true')), $(CBTNuGetPackagesRestoredMarker), $(CBTNuGetAllProjects.Split(';'))))</CBTNuGetPackagesRestored>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(CBTEnableGlobalPackageRestore)' == 'true' And '$(CBTNuGetGeneratePackageProperties)' == 'true' ">
    <CBTNuGetGlobalPackagePropertyFile Condition=" '$(CBTNuGetGlobalPackagePropertyFile)' == '' ">$(CBTIntermediateOutputPath)\GlobalPackages.props</CBTNuGetGlobalPackagePropertyFile>

    <CBTNuGetGlobalPackagePropertiesCreated>$(CBTNuGetTasksAssemblyPath.GetType().Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue(null).CreateInstanceFromAndUnwrap($(CBTNuGetTasksAssemblyPath), 'CBT.NuGet.Tasks.NuGetRestore').GenerateNuGetProperties($(CBTNuGetGlobalPackagesRestoreFile), $(CBTNuGetAllProjects.Split(';')), $(CBTNuGetGlobalPackagePropertyFile), $(CBTNuGetPackagePropertyNamePrefix), $(CBTNuGetPackagePropertyValuePrefix)))</CBTNuGetGlobalPackagePropertiesCreated>
  </PropertyGroup>


  <PropertyGroup Condition=" '$(CBTEnablePackageRestore)' == 'true' And '$(CBTNuGetGeneratePackageProperties)' == 'true' ">
    <CBTNuGetPackagePropertyFile Condition=" '$(CBTNuGetPackagePropertyFile)' == '' ">$(CBTNuGetIntermediateOutputPath)\$([System.IO.Path]::GetFileName('$(CBTNuGetRestoreFile)')).props</CBTNuGetPackagePropertyFile>

    <CBTNuGetPackagePropertiesCreated>$(CBTNuGetTasksAssemblyPath.GetType().Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue(null).CreateInstanceFromAndUnwrap($(CBTNuGetTasksAssemblyPath), 'CBT.NuGet.Tasks.NuGetRestore').GenerateNuGetProperties($(CBTNuGetRestoreFile), $(CBTNuGetAllProjects.Split(';')), $(CBTNuGetPackagePropertyFile), $(CBTNuGetPackagePropertyNamePrefix), $(CBTNuGetPackagePropertyValuePrefix)))</CBTNuGetPackagePropertiesCreated>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(CBTEnableImportBuildPackages)' != 'false' ">
    <CBTBuildPackagePropsFile Condition=" '$(CBTBuildPackagePropsFile)' == '' ">$(CBTModulePath)\NuGetBuildPackages.props</CBTBuildPackagePropsFile>
    <CBTBuildPackageTargetsFile Condition=" '$(CBTBuildPackageTargetsFile)' == '' ">$(CBTModulePath)\NuGetBuildPackages.targets</CBTBuildPackageTargetsFile>
    <CBTBuildPackageImportInputs Condition=" '$(CBTBuildPackageImportInputs)' == '' ">$(MSBuildThisFileFullPath);$(CBTNuGetTasksAssemblyPath);$(CBTModulePackageConfigPath)</CBTBuildPackageImportInputs>
    
    <CBTGlobalBuildPackagesCreated>$(CBTNuGetTasksAssemblyPath.GetType().Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue(null).CreateInstanceFromAndUnwrap('$(CBTNuGetTasksAssemblyPath)', 'CBT.NuGet.Tasks.ImportBuildPackages').Execute('$(CBTModulePackageConfigPath)', '$(CBTBuildPackagePropsFile)', '$(CBTBuildPackageTargetsFile)', $(CBTBuildPackageImportInputs.Split(';')), $(CBTAllModulePaths.Split(';'))))</CBTGlobalBuildPackagesCreated>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)CBT.NuGet.targets" />

  <Import Project="$(CBTNuGetGlobalPackagePropertyFile)" Condition=" '$(CBTNuGetGlobalPackagePropertiesCreated)' == 'true' And Exists('$(CBTNuGetGlobalPackagePropertyFile)') "/>

  <Import Project="$(CBTNuGetPackagePropertyFile)" Condition=" '$(CBTNuGetPackagePropertiesCreated)' == 'true' And Exists('$(CBTNuGetPackagePropertyFile)') "/>

  <Import Project="$(MSBuildThisFileDirectory)Microsoft.NuGet\Microsoft.NuGet.props" Condition=" '$(IncludeNuGetImports)' != 'false' And !Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.Props\ImportBefore\Microsoft.NuGet.ImportBefore.props') "/>

  <Import Project="$(CBTBuildPackagePropsFile)" Condition=" '$(CBTEnableImportBuildPackages)' != 'false' "/>

</Project>