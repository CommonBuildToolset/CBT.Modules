<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup> 
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    <CBTInjectionName>CBT.Nuget.AggregatePackage.props</CBTInjectionName>
  </PropertyGroup> 
 
  <Import Project="$(CBTLocalBuildExtensionsPath)\Before.$(CBTInjectionName)" Condition=" '$(CBTLocalBuildExtensionsPath)' != '' And Exists('$(CBTLocalBuildExtensionsPath)\Before.$(CBTInjectionName)') " /> 
  <Import Project="$(CBTModuleExtensionsPath)\Before.$(CBTInjectionName)" Condition=" '$(CBTModuleExtensionsPath)' != '' And Exists('$(CBTModuleExtensionsPath)\Before.$(CBTInjectionName)') " /> 

  <PropertyGroup>
    <CBTEnableAggregatePackageRestore Condition=" '$(CBTEnableAggregatePackageRestore)' == '' And '$(CBTEnablePackageRestore)'=='true' ">true</CBTEnableAggregatePackageRestore>
    <CBTAggregatePackageImport Condition=" '$(CBTAggregatePackageImport)'=='' and Exists('$(MSBuildProjectDirectory)\CBT.AggregatePackages.props') ">$(MSBuildProjectDirectory)\CBT.AggregatePackages.props</CBTAggregatePackageImport>
    <CBTAggregateDestPackageRoot Condition=" '$(CBTAggregateDestPackageRoot)'=='' ">$(NuGetPackagesPath)\.agg</CBTAggregateDestPackageRoot>
    <CBTNuGetAggregatePackageImmutableRoots Condition=" '$(CBTNuGetAggregatePackageImmutableRoots)'=='' ">$(NuGetPackagesPath)</CBTNuGetAggregatePackageImmutableRoots>
  </PropertyGroup>

  <Import Project="$(CBTAggregatePackageImport)" Condition=" '$(CBTAggregatePackageImport)'!='' and '$(CBTEnableAggregatePackageRestore)'=='true' "/>

  <PropertyGroup Condition=" '$(CBTEnableAggregatePackageRestore)' == 'true' "> 
    <CBTNuGetAggregatePackagePropertyFile Condition=" '$(CBTNuGetAggregatePackagePropertyFile)' == '' ">$(IntermediateOutputPath)\AggregatePackages.props</CBTNuGetAggregatePackagePropertyFile> 
    <CBTNuGetAggregatePackageGenerated Condition="'$(CBTNuGetAggregatePackageGenerated)'=='' And '$(DesignTimeBuild)'!='true' ">$(CBTNuGetTasksAssemblyPath.GetType().Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue(null).CreateInstanceFromAndUnwrap($(CBTNuGetTasksAssemblyPath), 'CBT.NuGet.Tasks.AggregatePackages').Execute('$(CBTAggregateDestPackageRoot)', '$(CBTAggregatePackage)', '$(CBTNuGetAggregatePackagePropertyFile)', '$(CBTNuGetAggregatePackageImmutableRoots)'))</CBTNuGetAggregatePackageGenerated> 
  </PropertyGroup>

  <ItemGroup>
    <CBTParseError Condition=" '$(CBTNuGetAggregatePackageGenerated)' == 'false' " Include="Aggregate packages were not generated and the build cannot continue.  Refer to other errors for more information.">
      <Code>CBT.NuGet.AggregatePackage.1000</Code>
    </CBTParseError>
  </ItemGroup>

  <Import Project="$(CBTNuGetAggregatePackagePropertyFile)" Condition=" '$(CBTNuGetAggregatePackageGenerated)' == 'true' And Exists('$(CBTNuGetAggregatePackagePropertyFile)') "/>

  <Import Project="$(CBTLocalBuildExtensionsPath)\After.$(CBTInjectionName)" Condition=" '$(CBTLocalBuildExtensionsPath)' != '' And Exists('$(CBTLocalBuildExtensionsPath)\After.$(CBTInjectionName)') " /> 
  <Import Project="$(CBTModuleExtensionsPath)\After.$(CBTInjectionName)" Condition=" '$(CBTModuleExtensionsPath)' != '' And Exists('$(CBTModuleExtensionsPath)\After.$(CBTInjectionName)') " /> 

</Project>
