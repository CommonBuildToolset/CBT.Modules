<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <NuGetTasksAssemblyFile Condition=" '$(NuGetTasksAssemblyFile)' == '' ">$(MSBuildThisFileDirectory)CBT.NuGet.dll</NuGetTasksAssemblyFile>
    <NuGetAllProjects>$(NuGetAllProjects);$(MSBuildThisFileFullPath);$(MSBuildThisFileDirectory)CBT.NuGet.targets;$(NuGetTasksAssemblyFile)</NuGetAllProjects>
    <EnablePackageRestore Condition=" '$(EnablePackageRestore)' == '' And '$(BuildingInsideVisualStudio)' != 'true' ">true</EnablePackageRestore>
    <NuGetPath Condition=" '$(NuGetPath)' == '' And '$(CBTModuleRestoreCommand)' != '' And $([System.IO.Path]::GetFileName($(CBTModuleRestoreCommand))) == 'NuGet.exe' And Exists($(CBTModuleRestoreCommand)) ">$([System.IO.Path]::GetDirectoryName($(CBTModuleRestoreCommand)))</NuGetPath>
    <DisableNuGetPackageRestoreOptimization Condition=" '$(DisableNuGetPackageRestoreOptimization)' == '' ">false</DisableNuGetPackageRestoreOptimization>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(EnablePackageRestore)' == 'true' And '$(NuGetRestoreFile)' == '' And Exists('$(MSBuildProjectDirectory)\project.json') ">
    <!-- For project.json, the file to pass to restore is the project itself -->
    <NuGetRestoreFile>$(MSBuildProjectFullPath)</NuGetRestoreFile>
    <NuGetAllProjects>$(NuGetAllProjects);$(MSBuildProjectDirectory)\project.json</NuGetAllProjects>
  </PropertyGroup>
  
  <PropertyGroup Condition=" '$(EnablePackageRestore)' == 'true' And '$(NuGetRestoreFile)' == ''  And Exists('$(MSBuildProjectDirectory)\packages.config') ">
    <NuGetRestoreFile>$(MSBuildProjectDirectory)\packages.config</NuGetRestoreFile>
    <NuGetAllProjects>$(NuGetAllProjects);$(MSBuildProjectFullPath)</NuGetAllProjects>
    <NuGetRestorePackagesDirectory Condition=" '$(NuGetRestorePackagesDirectory)' == '' ">$(NuGetPackagesPath)</NuGetRestorePackagesDirectory>
    <NuGetGeneratePackageProperties Condition=" '$(NuGetGeneratePackageProperties)' == '' ">true</NuGetGeneratePackageProperties>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Disable package restoration if there is no packages.config/project.json -->
    <EnablePackageRestore Condition=" '$(NuGetRestoreFile)' == '' ">false</EnablePackageRestore>
  </PropertyGroup>
  
  <PropertyGroup Condition=" '$(EnablePackageRestore)' == 'true' ">
    <NuGetPackagesRestoredMarker Condition=" '$(NuGetPackagesRestoredMarker)' == '' ">$(IntermediateOutputPath)\$(MSBuildProjectFile).NuGetPackagesRestored</NuGetPackagesRestoredMarker>
    <NuGetRestoreRequireConsent Condition=" '$(NuGetRestoreRequireConsent)' == '' ">false</NuGetRestoreRequireConsent>
    <NuGetDisableParallelProcessing Condition=" '$(NuGetDisableParallelProcessing)' == '' ">false</NuGetDisableParallelProcessing>
    <NuGetNoCache Condition=" '$(NuGetNoCache)' == '' ">false</NuGetNoCache>
    <NuGetNonInteractive Condition=" '$(NuGetNonInteractive)' == '' ">true</NuGetNonInteractive>
    <NuGetTimeout Condition=" '$(NuGetTimeout)' == '' ">0</NuGetTimeout>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(EnablePackageRestore)' == 'true' And '$(BuildingInsideVisualStudio)' != 'true' And '$(NuGet_ProjectReferenceToResolve)' == '' ">
    <!-- Restore packages if not running under Visual Studio and not running as part of NuGet's restore -->
    <NuGetPackagesRestored>$(NuGetTasksAssemblyFile.GetType().Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue(null).CreateInstanceFromAndUnwrap($(NuGetTasksAssemblyFile), 'CBT.NuGet.Tasks.NuGetRestore').Execute($(NuGetRestoreFile), '$(NuGetMsBuildVersion)', $(NuGetRestorePackagesDirectory), $(NuGetRestoreRequireConsent), $(NuGetRestoreSolutionDirectory), $(NuGetDisableParallelProcessing), $(NuGetFallbackSource.Split(';')), $(NuGetNoCache), $(NuGetPackageSaveMode), $(NuGetSource.Split(';')), $(NuGetConfigFile), $(NuGetNonInteractive), $(NuGetVerbosity), $(NuGetTimeout), $(NuGetPath), $(DisableNuGetPackageRestoreOptimization), $(NuGetPackagesRestoredMarker), $(NuGetAllProjects.Split(';'))))</NuGetPackagesRestored>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(EnablePackageRestore)' == 'true' And '$(NuGetGeneratePackageProperties)' == 'true' ">
    <NuGetPackagePropertyFile Condition=" '$(NuGetPackagePropertyFile)' == '' ">$(IntermediateOutputPath)\$([System.IO.Path]::GetFileName('$(NuGetRestoreFile)')).props</NuGetPackagePropertyFile>
    <NuGetPackagePropertyNamePrefix Condition=" '$(NuGetPackagePropertyNamePrefix)' == '' ">NuGetPath_</NuGetPackagePropertyNamePrefix>
    <NuGetPackagePropertyValuePrefix Condition=" '$(NuGetPackagePropertyValuePrefix)' == '' ">%24(NuGetPackagesPath)\</NuGetPackagePropertyValuePrefix>
    
    <NuGetPackagePropertiesCreated>$(NuGetTasksAssemblyFile.GetType().Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue(null).CreateInstanceFromAndUnwrap($(NuGetTasksAssemblyFile), 'CBT.NuGet.Tasks.NuGetRestore').GenerateNuGetProperties($(NuGetRestoreFile), $(NuGetAllProjects.Split(';')), $(NuGetPackagePropertyFile), $(NuGetPackagePropertyNamePrefix), $(NuGetPackagePropertyValuePrefix)))</NuGetPackagePropertiesCreated>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)CBT.NuGet.targets" />

  <Import Project="$(NuGetPackagePropertyFile)" Condition=" '$(NuGetPackagePropertiesCreated)' == 'true' And Exists('$(NuGetPackagePropertyFile)') "/>

</Project>