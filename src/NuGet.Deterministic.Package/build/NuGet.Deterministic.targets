<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Condition=" '$(EnableNuGetDeterministic)' != 'false' ">
    <NuGetDeterministicTasksAssemblyPath Condition=" '$(NuGetDeterministicTasksAssemblyPath)' == '' ">$(MSBuildThisFileDirectory)tasks\NuGet.Tasks.Deterministic.dll</NuGetDeterministicTasksAssemblyPath>
    
    <!--
      The path to a file written to when validating to not run validation unless it is necessary.
    -->
    <NuGetDeterministicPackagesValidatedFile Condition=" '$(NuGetDeterministicPackagesValidatedFile)' == '' ">$(IntermediateOutputPath)$(MSBuildProjectFile).ndpv</NuGetDeterministicPackagesValidatedFile>

    <!--
      Generate or validate but never both.  Users set $(ValidateNuGetPackagesAreDeterministic) to 'true' for hosted builds which disable generation and enables validation.
    -->
    <PrepareForBuildDependsOn Condition=" '$(ValidateNuGetPackagesAreDeterministic)' != 'true' ">$(PrepareForBuildDependsOn);GenerateNuGetDeterministicProps</PrepareForBuildDependsOn>
    <PrepareForBuildDependsOn Condition=" '$(ValidateNuGetPackagesAreDeterministic)' == 'true' ">$(PrepareForBuildDependsOn);ValidateNuGetPackagesAreDeterministic</PrepareForBuildDependsOn>
  </PropertyGroup>

  <UsingTask AssemblyFile="$(NuGetDeterministicTasksAssemblyPath)" TaskName="GenerateLockedPackageReferencesFile" Condition=" '$(EnableNuGetDeterministic)' != 'false' "/>
  <UsingTask AssemblyFile="$(NuGetDeterministicTasksAssemblyPath)" TaskName="ValidateNuGetPackageHashes" Condition=" '$(EnableNuGetDeterministic)' != 'false' " />

  <Target Name="GenerateNuGetDeterministicProps"
          Condition=" @(PackageReference->Count()) != '0' "
          Inputs="$(NuGetDeterministicTasksAssemblyPath);$(MSBuildThisFileFullPath);$(ProjectAssetsFile)"
          Outputs="$(NuGetDeterministicLockedPropsFile)"
          DependsOnTargets="GetNuGetDeterministicExcludes;$(GenerateNuGetDeterministicPropsDependsOn)">

    <GenerateLockedPackageReferencesFile
      PropsFile="$(NuGetDeterministicLockedPropsFile)"
      ProjectAssetsFile="$(ProjectAssetsFile)"
      PackagesToExclude="@(NuGetDeterministicPackagesToExclude)"
      />

  </Target>

  <Target Name="ValidateNuGetPackagesAreDeterministic"
          Condition=" '$(ValidateNuGetPackagesAreDeterministic)' == 'true' And @(PackageReference->Count()) != '0' "
          DependsOnTargets="GetNuGetDeterministicExcludes;$(ValidateNuGetPackagesAreDeterministicDependsOn)"
          Inputs="$(NuGetDeterministicTasksAssemblyPath);$(MSBuildThisFileFullPath);$(NuGetDeterministicLockedPropsFile)"
          Outputs="$(NuGetDeterministicPackagesValidatedFile)">

    <!--
      Log an error if $(ValidateNuGetPackagesAreDeterministic) is 'true' but NuGetAssetsLock.props was not imported (because $(NuGetDeterministicPropsWasImported) is not 'true')
    -->
    <Error Code="ND1004"
           Condition=" '@(PackageReference)' != '' And '$(NuGetDeterministicPropsWasImported)' != 'true' "
           Text=" '$(NuGetDeterministicLockedPropsFile)' was not imported and this project contains &lt;PackageReference /&gt; items.  Ensure this file has been generated and commited to source control.  See NuGet.Deterministic NuGet package for more details."
    />

    <!--
      Determine what packages are deterministic and which ones are not.
    -->
    <ItemGroup>
      <_DeterministicNuGetPackages Include="@(PackageReference)" Condition=" '%(PackageReference.Sha512)' != '' "/>
      <_NonDeterministicNuGetPackages Include="@(PackageReference)" Exclude="@(_DeterministicNuGetPackages);@(NuGetDeterministicPackagesToExclude)"/>
    </ItemGroup>
    
    <!--
      Log an error if a package reference from the NuGetAssetsLock.props does not have enough information to determine if it is deterministic.
    -->
    <Error Code="ND1005"
           Condition=" '%(_NonDeterministicNuGetPackages.Identity)' != '' "
           Text="A non-deterministic package reference was found '%(_NonDeterministicNuGetPackages.Identity)'.  Ensure '$(NuGetDeterministicLockedPropsFile)' contains this package with an explicit version.  You can regenerate the file by deleting it and building locally again."
           />
    
    <!--
      Validate the SHA512 hashes of the packages
    -->
    <ValidateNuGetPackageHashes
      PackageFolders="$(NuGetPackageFolders)"
      PackageReferences="@(_DeterministicNuGetPackages)"
      Condition=" '$(NuGetDeterministicValidatePackageHash)' != 'false' "
    />

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('$(NuGetDeterministicPackagesValidatedFile)'))" />
    
    <Touch Files="$(NuGetDeterministicPackagesValidatedFile)"
           AlwaysCreate="true"
           ForceTouch="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <!--
    Adds items to the @(NuGetDeterministicPackagesToExclude) item group which lists packages to not validate.
  -->
  <Target Name="GetNuGetDeterministicExcludes">
    <ItemGroup>
      <!--
        Exclude all implicitly defined packages unless $(NuGetDeterministicExcludeImplicitPackages) is 'true'
      -->
      <NuGetDeterministicPackagesToExclude Include="@(PackageReference)" Condition=" '$(NuGetDeterministicExcludeImplicitPackages)' != 'false' And '%(PackageReference.IsImplicitlyDefined)' == 'true' "/>
    </ItemGroup>
  </Target>

</Project>
